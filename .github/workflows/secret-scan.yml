name: Secret Scan

on:
  push:
  pull_request:

permissions:
  contents: read
  security-events: write

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --report-format sarif --report-path gitleaks.sarif

      # Crée un SARIF minimal si gitleaks n'a rien écrit (zéro finding)
      - name: Ensure SARIF exists
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f gitleaks.sarif ]; then
            printf '%s\n' \
              '{' \
              '  "$schema": "https://json.schemastore.org/sarif-2.1.0.json",' \
              '  "version": "2.1.0",' \
              '  "runs": [{' \
              '    "tool": {"driver": {"name": "gitleaks","informationUri": "https://github.com/gitleaks/gitleaks","version": "action"}},' \
              '    "results": []' \
              '  }]' \
              '}' > gitleaks.sarif
          fi
          ls -l gitleaks.sarif

      # Uploade toujours le SARIF (même si gitleaks a échoué) ; le job reste rouge si gitleaks a trouvé des fuites
      - name: Upload SARIF to Code Scanning
        if: ${{ always() }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
